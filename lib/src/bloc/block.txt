                            final userSend = User(
                                name: _inputUser.value.text, pass: _inputPass.value.text);
                            //! dentro de este boton puedo llamara a las funciones que se necesitan para ocupar la data ejemplo seria pasar los campos que necesito renderizar como nombre y estado
                            BlocProvider.of<LoginBloc>(context, listen: false)
                                .add(LoginInWithEmailButtonPressed(
                                    user: userSend));

                            Navigator.pushNamed(context, 'home_view');



                            // contraseÃ±a : hola12345





                                Future _currentSession() async {
      setState(() {
        user = client.auth.currentUser;
      });
      client.auth.onAuthStateChange.listen((event) {
        if (event == AuthChangeEvent.signedIn) {
          print("user data LoginView: ${user!.email}");
          setState(() {
            _isLogOut = true;
          });
        }
      });
    }


        Future createUser({
      required final String name,
      required final String contra,
    }) async {
      try {
        final res = await client.auth.signUp(email: name, password: contra);
      } catch (e) {
        print("error type : -> ${e}");
      }
    }



/**
 *   
                            color: 
 *  Padding(
                    padding: const EdgeInsets.all(5),
                    child: Column(
                      children: [
                        Expanded(
                          child: Align(
                            alignment: Alignment.topRight,
                            child: IconButton(
                                color: _favoritePet.contains(dataList[index])
                                    ? Colors.red
                                    : Colors.amber,
                                onPressed: () {
                                  final dataSelec = data;
                                  final datatrue =
                                      _favoritePet.contains(dataList[index]);
                                  // print('indice seleccionado -> $index , $data');
                                  isFavorite(dataSelec, datatrue);
                                },
                                icon: Icon(Icons.favorite)),
                          ),
                        ),
                        CircleAvatar(
                            backgroundColor: Colors.pink.shade300,
                            child: Icon(Icons.female)),
                      ],
                    ),
                  )

                    void isFavorite(data, bool dataTrue) {
    if (dataTrue) {
      _favoritePet.remove(data);
    } else {
      _favoritePet.add(data);
    }
    print(
        'data lengt -> ${_favoritePet.length} \n data view -> ${_favoritePet}');
  }
  Future<dynamic> getData() async {
    try {
      final resdata =
          await client.from('publicaciones_prueba').select('*').execute();
      final data = resdata.data;
      setState(() {
        dataList = data;
      });
      return data;
    } catch (e) {
      print('Error al obtener datos: ${e}');
    }
  }

                  
 */